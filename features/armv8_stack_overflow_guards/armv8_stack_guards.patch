diff --git a/SDK_10.0.12.146/sdk/bsp/peripherals/src/hw_hard_fault.c b/SDK_10.0.12.146/sdk/bsp/peripherals/src/hw_hard_fault.c
index 838e45c..058e372 100644
--- a/SDK_10.0.12.146/sdk/bsp/peripherals/src/hw_hard_fault.c
+++ b/SDK_10.0.12.146/sdk/bsp/peripherals/src/hw_hard_fault.c
@@ -210,7 +210,7 @@ void BusFault_Handler(void)
 #if (dg_configCODE_LOCATION == NON_VOLATILE_IS_FLASH)
 __attribute__((section("text_retained")))
 #endif
-void UsageFault_Handler(void)
+__WEAK void UsageFault_Handler(void)
 {
         volatile uint16_t usage_fault_status_reg __UNUSED;
 
diff --git a/SDK_10.0.12.146/sdk/bsp/startup/DA1469x/GCC/exception_handlers.S b/SDK_10.0.12.146/sdk/bsp/startup/DA1469x/GCC/exception_handlers.S
index c42fb66..4e83786 100644
--- a/SDK_10.0.12.146/sdk/bsp/startup/DA1469x/GCC/exception_handlers.S
+++ b/SDK_10.0.12.146/sdk/bsp/startup/DA1469x/GCC/exception_handlers.S
@@ -45,6 +45,16 @@
         	.globl	Wakeup_Reset_Handler
         	.type	Wakeup_Reset_Handler, %function
 Wakeup_Reset_Handler:
+
+			/*
+			The MSPLIM register is not retained in sleep, we must restore it on wakeup or from
+			reset
+			*/
+#if dg_configARMV8_USE_STACK_GUARDS == 1
+			    ldr		r0, =__StackLimit
+			    add		r0, r0, #dg_configMSP_PADDING
+			    msr		MSPLIM, r0
+#endif
                 /*
                  *  Determine if this is a cold reset (e.g. POR, watchdog reset etc.) or
                  *  a wakeup from deep sleep.
@@ -77,6 +87,17 @@ Reset_Handler:
                 ldr     r1, =Wakeup_Reset_Handler
                 str     r1, [r0]
 
+#if dg_configARMV8_USE_STACK_GUARDS == 1
+				/*
+				* Intialize the MSPLIM register.  Must be placed here as the msr instruction
+				* requires the device to be in privileged mode. Add padding to the register
+				* so we can leave room for the UsageFault_Handler to place items on the stack
+				*/
+		        ldr		r0, =__StackLimit
+		        add		r0, r0, #dg_configMSP_PADDING
+		        msr		MSPLIM, r0
+#endif
+
 #if (dg_configENABLE_MTB)
                 ldr     r0, =MTB_POSITION_REG
                 ldr     r1, =0
@@ -244,6 +265,47 @@ Reset_Handler:
         	.pool
         	.size	Reset_Handler, . - Reset_Handler
 
+#if dg_configARMV8_USE_STACK_GUARDS == 1
+#if (dg_configCODE_LOCATION == NON_VOLATILE_IS_FLASH)
+            .section text_retained
+#endif
+             .align  2
+             .thumb
+             .thumb_func
+             .globl  UsageFault_Handler
+             .type   UsageFault_Handler, %function
+ UsageFault_Handler:
+ /*
+	 * We need special handling for the UsageFault_Handler with the use of the MSPLIM register set.  First we check to
+	 * see if the MSPLIM or the PSPLIM registers equal the msp or psp and set the stack pointer mask respectively.
+	 * If the MSPLIM register triggered the usagefault, then we must move the MSPLIM back below the padding to allow for the
+	 * UsageFault_HandlerC to push to the stack if needed.  If the MSPLIM is not moved, then a push to the stack can cause
+	 * nested UsageFaults and circular exceptions
+	 */
+		       ldr		r2,=UsageFault_HandlerC
+		       mrs		r1, msp
+		       mrs		r0, MSPLIM
+		       cmp		r0, r1
+		       beq		UsageFault_with_MSP_Overflow
+		       mrs		r1, psp
+		       mrs		r0, PSPLIM
+		       cmp		r0, r1
+		       beq 		UsageFault_with_PSP_Overflow
+		       mov		r0, #0
+		       bx		r2
+
+ UsageFault_with_PSP_Overflow:
+		       mov 		r0, #2
+		       bx		r2
+
+ UsageFault_with_MSP_Overflow:
+		       ldr 		r1, =__StackLimit
+		       msr		MSPLIM, r1
+		       mov		r0, #1
+		       bx		r2
+ #endif
+
+
 #if (dg_configCODE_LOCATION == NON_VOLATILE_IS_FLASH)
                 .section text_retained
 #endif
diff --git a/SDK_10.0.12.146/sdk/free_rtos/portable/GCC/DA1469x/port.c b/SDK_10.0.12.146/sdk/free_rtos/portable/GCC/DA1469x/port.c
index 1c985d4..1f2ed93 100644
--- a/SDK_10.0.12.146/sdk/free_rtos/portable/GCC/DA1469x/port.c
+++ b/SDK_10.0.12.146/sdk/free_rtos/portable/GCC/DA1469x/port.c
@@ -445,6 +445,9 @@ void xPortPendSVHandler( void )
 	"	dsb									\n"
 	"	isb									\n"
 	"	bl vTaskSwitchContext				\n"
+#if dg_configARMV8_USE_STACK_GUARDS == 1
+	"       bl vTaskSwitchStackGuard                        \n"
+#endif
 	"	mov r0, #0							\n"
 	"	msr basepri, r0						\n"
 	"	ldmia sp!, {r0, r3}					\n"
diff --git a/SDK_10.0.12.146/sdk/free_rtos/tasks.c b/SDK_10.0.12.146/sdk/free_rtos/tasks.c
index 00983d7..af57a3f 100644
--- a/SDK_10.0.12.146/sdk/free_rtos/tasks.c
+++ b/SDK_10.0.12.146/sdk/free_rtos/tasks.c
@@ -2868,6 +2868,16 @@ BaseType_t xSwitchRequired = pdFALSE;
 #endif /* configUSE_APPLICATION_TASK_TAG */
 /*-----------------------------------------------------------*/
 
+#if dg_configARMV8_USE_STACK_GUARDS == 1
+
+void vTaskSwitchStackGuard(void)
+{
+        volatile uint32_t end_of_stack_val = (uint32_t)pxCurrentTCB->pxStack;
+     __set_PSPLIM( end_of_stack_val);
+}
+
+#endif //#if dg_configARMV8_USE_STACK_GUARDS == 1
+
 void vTaskSwitchContext( void )
 {
 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
